{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { Component } from \"react\";\nimport SwipeableViews from \"react-swipeable-views\";\nimport { matchPath, withRouter } from \"react-router\";\nimport generatePath from \"./generatePath\";\n\nvar SwipeableRoutes = function (_Component) {\n  _inherits(SwipeableRoutes, _Component);\n\n  function SwipeableRoutes() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, SwipeableRoutes);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.state = {\n      urls: {}\n    }, _this.handleIndexChange = function (index, type) {\n      var _React$Children$toArr = React.Children.toArray(_this.props.children)[index].props,\n          path = _React$Children$toArr.path,\n          defaultParams = _React$Children$toArr.defaultParams;\n      var url = void 0;\n\n      if (path.includes(\":\")) {\n        if (path in _this.state.urls) {\n          url = _this.state.urls[path];\n        } else {\n          // Build url with defaults\n          url = generatePath(path, defaultParams);\n\n          _this.setState(function (state) {\n            var _extends2;\n\n            return {\n              urls: _extends({}, state.urls, (_extends2 = {}, _extends2[path] = url, _extends2))\n            };\n          });\n        }\n      } else {\n        url = path;\n      }\n\n      _this.historyGoTo(url); // Call the onChangeIndex if it's set\n\n\n      if (typeof _this.props.onChangeIndex === \"function\") {\n        _this.props.onChangeIndex(index, type);\n      }\n    }, _this.triggerOnChangeIndex = function (location) {\n      var children = _this.props.children;\n      React.Children.forEach(children, function (element, index) {\n        var _element$props = element.props,\n            pathProp = _element$props.path,\n            exact = _element$props.exact,\n            strict = _element$props.strict,\n            from = _element$props.from;\n        var path = pathProp || from;\n\n        if (matchPath(location.pathname, {\n          path: path,\n          exact: exact,\n          strict: strict\n        })) {\n          if (typeof _this.props.onChangeIndex === \"function\") {\n            _this.props.onChangeIndex(index);\n          }\n\n          _this.setState(function (state) {\n            var _extends3;\n\n            return {\n              urls: _extends({}, state.urls, (_extends3 = {}, _extends3[path] = location.pathname, _extends3))\n            };\n          });\n        }\n      });\n    }, _this.historyGoTo = function (path) {\n      var _this$props = _this.props,\n          replace = _this$props.replace,\n          history = _this$props.history;\n      return replace ? history.replace(path) : history.push(path);\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  } // Trigger the location change to the route path\n\n\n  SwipeableRoutes.prototype.componentDidMount = function componentDidMount() {\n    var _this2 = this;\n\n    var history = this.props.history;\n    this.triggerOnChangeIndex(history.location);\n    this.unlistenHistory = history.listen(function (location) {\n      // When the location changes, call onChangeIndex with the route index\n      _this2.triggerOnChangeIndex(location);\n    });\n  };\n\n  SwipeableRoutes.prototype.componentWillUnmount = function componentWillUnmount() {\n    this.unlistenHistory();\n  };\n\n  SwipeableRoutes.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {\n    // If index prop changed, change the location to the path of that route\n    if (prevProps.index !== this.props.index) {\n      var paths = React.Children.map(this.props.children, function (element) {\n        return element.props.path;\n      });\n      this.historyGoTo(paths[this.props.index]);\n    }\n  };\n\n  SwipeableRoutes.prototype.render = function render() {\n    var _this3 = this;\n\n    var _props = this.props,\n        children = _props.children,\n        index = _props.index,\n        replace = _props.replace,\n        innerRef = _props.innerRef,\n        location = _props.location,\n        history = _props.history,\n        staticContext = _props.staticContext,\n        routeMatch = _props.match,\n        rest = _objectWithoutProperties(_props, [\"children\", \"index\", \"replace\", \"innerRef\", \"location\", \"history\", \"staticContext\", \"match\"]); // If there's no match, render the first route with no params\n\n\n    var matchedIndex = 0;\n    var match = void 0;\n\n    if (index) {\n      matchedIndex = index;\n    } else {\n      React.Children.forEach(children, function (element, index) {\n        var _element$props2 = element.props,\n            pathProp = _element$props2.path,\n            exact = _element$props2.exact,\n            strict = _element$props2.strict,\n            from = _element$props2.from;\n        var path = pathProp || from;\n        match = matchPath(location.pathname, {\n          path: path,\n          exact: exact,\n          strict: strict\n        });\n\n        if (match) {\n          matchedIndex = index;\n        }\n      });\n    }\n\n    var renderableRoutes = React.Children.toArray(children).filter(function (element, index) {\n      return !element.props.path.includes(\":\") || Boolean(element.props.defaultParams) || element.props.path in _this3.state.urls;\n    });\n    return React.createElement(SwipeableViews, _extends({}, rest, {\n      index: matchedIndex,\n      onChangeIndex: this.handleIndexChange,\n      ref: innerRef\n    }), renderableRoutes.map(function (element, index) {\n      var _element$props3 = element.props,\n          path = _element$props3.path,\n          component = _element$props3.component,\n          render = _element$props3.render,\n          children = _element$props3.children;\n      var props = {\n        location: location,\n        history: history,\n        staticContext: staticContext\n      };\n      var match = matchPath(location.pathname, element.props);\n\n      if (match) {\n        match.type = \"full\";\n      } else if (path in _this3.state.urls) {\n        match = matchPath(_this3.state.urls[path], element.props);\n        match.type = \"outOfView\";\n      } else {\n        match = matchPath(generatePath(path, element.props.defaultParams), element.props);\n        match.type = \"none\";\n      }\n\n      props.match = match;\n      props.key = path; // A lot of this code is borrowed from the render method of\n      // Route. Why can't I just render the Route then?\n      // Because Route only renders the component|render|children\n      // if there's a match with the location, while here I render\n      // regardless of the location.\n\n      return component ? React.createElement(component, props) : render ? render(props) : children ? typeof children === \"function\" ? children(props) : !Array.isArray(children) || children.length // Preact defaults to empty children array\n      ? React.Children.only(children) : null : null;\n    }));\n  };\n\n  return SwipeableRoutes;\n}(Component);\n\nexport default withRouter(SwipeableRoutes);","map":null,"metadata":{},"sourceType":"module"}